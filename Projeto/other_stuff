# X_train = [x[0] for x in train_data]
# X_test = [x[0] for x in test_data]
#
# Y_train = [x[1] for x in train_data]
# Y_test = [x[1] for x in test_data]
#
# vectorizer = TfidfVectorizer(min_df = 2, max_df = 0.15, sublinear_tf = False, use_idf = False, tokenizer = tokenize)
# training_set = vectorizer.fit_transform(X_train)
# test_set = vectorizer.transform(X_test)
#
# #classifier = SGDClassifier(loss = 'hinge', penalty = 'l2', alpha = 1e-3, n_iter = 5, random_state = 42)
# classifier = MultinomialNB( )
# #classifier = GaussianNB( )
# #classifier = RandomForestClassifier(n_estimators = 100)
# classifier.fit(training_set, Y_train)
#
# predicted = classifier.predict(training_set)
# metric = metrics.classification_report(Y_train, predicted, \
#                                        target_names = ['negative', 'neutral', 'positive'])
#
# print(metric)
# print(np.mean(predicted == Y_train))
